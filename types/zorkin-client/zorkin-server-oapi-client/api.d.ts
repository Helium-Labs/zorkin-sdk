/**
 * OpenAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthorizeSession200Response
 */
export interface AuthorizeSession200Response {
    /**
     *
     * @type {Array<string>}
     * @memberof AuthorizeSession200Response
     */
    'authorizedSessionTxIds': Array<string>;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSession200Response
     */
    'contractAccountTealSourceCode': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSession200Response
     */
    'addressSeed': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSession200Response
     */
    'tenantAuthAppId': string;
}
/**
 *
 * @export
 * @interface AuthorizeSessionRequest
 */
export interface AuthorizeSessionRequest {
    /**
     *
     * @type {string}
     * @memberof AuthorizeSessionRequest
     */
    'clientJWT': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSessionRequest
     */
    'sessionPK': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSessionRequest
     */
    'clientID': string;
    /**
     *
     * @type {string}
     * @memberof AuthorizeSessionRequest
     */
    'groupTxnIdSessionSignature': string;
}
/**
 *
 * @export
 * @interface DemoFundContractAccount200Response
 */
export interface DemoFundContractAccount200Response {
    /**
     *
     * @type {string}
     * @memberof DemoFundContractAccount200Response
     */
    'message': string;
}
/**
 *
 * @export
 * @interface GetActiveSession200Response
 */
export interface GetActiveSession200Response {
    /**
     *
     * @type {string}
     * @memberof GetActiveSession200Response
     */
    'activeSessionPK': string;
}
/**
 *
 * @export
 * @interface GetAuthorizeSessionGroupHash200Response
 */
export interface GetAuthorizeSessionGroupHash200Response {
    /**
     *
     * @type {string}
     * @memberof GetAuthorizeSessionGroupHash200Response
     */
    'groupTxnId': string;
}
/**
 *
 * @export
 * @interface GetAuthorizeSessionGroupHashRequest
 */
export interface GetAuthorizeSessionGroupHashRequest {
    /**
     *
     * @type {string}
     * @memberof GetAuthorizeSessionGroupHashRequest
     */
    'clientJWT': string;
    /**
     *
     * @type {string}
     * @memberof GetAuthorizeSessionGroupHashRequest
     */
    'sessionPK': string;
    /**
     *
     * @type {string}
     * @memberof GetAuthorizeSessionGroupHashRequest
     */
    'clientID': string;
}
/**
 *
 * @export
 * @interface GetContractAccount200Response
 */
export interface GetContractAccount200Response {
    /**
     *
     * @type {number}
     * @memberof GetContractAccount200Response
     */
    'tenantAuthAppId': number;
    /**
     *
     * @type {string}
     * @memberof GetContractAccount200Response
     */
    'addressSeed': string;
    /**
     *
     * @type {string}
     * @memberof GetContractAccount200Response
     */
    'contractAccountTealSourceCode': string;
    /**
     *
     * @type {string}
     * @memberof GetContractAccount200Response
     */
    'sessionPK': string;
}
/**
 *
 * @export
 * @interface GetContractAccountRequest
 */
export interface GetContractAccountRequest {
    /**
     *
     * @type {string}
     * @memberof GetContractAccountRequest
     */
    'clientJWT': string;
    /**
     *
     * @type {string}
     * @memberof GetContractAccountRequest
     */
    'clientID': string;
}
/**
 * AuthorizeSessionApi - axios parameter creator
 * @export
 */
export declare const AuthorizeSessionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Authorize Session with provided Client JWT, signature of authorizing group tx made with provided Session PK for Client ID
     * @param {AuthorizeSessionRequest} [authorizeSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeSession: (authorizeSessionRequest?: AuthorizeSessionRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthorizeSessionApi - functional programming interface
 * @export
 */
export declare const AuthorizeSessionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Authorize Session with provided Client JWT, signature of authorizing group tx made with provided Session PK for Client ID
     * @param {AuthorizeSessionRequest} [authorizeSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeSession(authorizeSessionRequest?: AuthorizeSessionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizeSession200Response>>;
};
/**
 * AuthorizeSessionApi - factory interface
 * @export
 */
export declare const AuthorizeSessionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Authorize Session with provided Client JWT, signature of authorizing group tx made with provided Session PK for Client ID
     * @param {AuthorizeSessionRequest} [authorizeSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeSession(authorizeSessionRequest?: AuthorizeSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizeSession200Response>;
};
/**
 * AuthorizeSessionApi - object-oriented interface
 * @export
 * @class AuthorizeSessionApi
 * @extends {BaseAPI}
 */
export declare class AuthorizeSessionApi extends BaseAPI {
    /**
     *
     * @summary Authorize Session with provided Client JWT, signature of authorizing group tx made with provided Session PK for Client ID
     * @param {AuthorizeSessionRequest} [authorizeSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizeSessionApi
     */
    authorizeSession(authorizeSessionRequest?: AuthorizeSessionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizeSession200Response, any>>;
}
/**
 * DemoFundContractAccountApi - axios parameter creator
 * @export
 */
export declare const DemoFundContractAccountApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Fund a contract account (testnet) for the demo
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    demoFundContractAccount: (getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DemoFundContractAccountApi - functional programming interface
 * @export
 */
export declare const DemoFundContractAccountApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Fund a contract account (testnet) for the demo
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    demoFundContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DemoFundContractAccount200Response>>;
};
/**
 * DemoFundContractAccountApi - factory interface
 * @export
 */
export declare const DemoFundContractAccountApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Fund a contract account (testnet) for the demo
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    demoFundContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<DemoFundContractAccount200Response>;
};
/**
 * DemoFundContractAccountApi - object-oriented interface
 * @export
 * @class DemoFundContractAccountApi
 * @extends {BaseAPI}
 */
export declare class DemoFundContractAccountApi extends BaseAPI {
    /**
     *
     * @summary Fund a contract account (testnet) for the demo
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoFundContractAccountApi
     */
    demoFundContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DemoFundContractAccount200Response, any>>;
}
/**
 * GetActiveSessionApi - axios parameter creator
 * @export
 */
export declare const GetActiveSessionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get currently active session public key
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveSession: (getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GetActiveSessionApi - functional programming interface
 * @export
 */
export declare const GetActiveSessionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get currently active session public key
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveSession(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetActiveSession200Response>>;
};
/**
 * GetActiveSessionApi - factory interface
 * @export
 */
export declare const GetActiveSessionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get currently active session public key
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveSession(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetActiveSession200Response>;
};
/**
 * GetActiveSessionApi - object-oriented interface
 * @export
 * @class GetActiveSessionApi
 * @extends {BaseAPI}
 */
export declare class GetActiveSessionApi extends BaseAPI {
    /**
     *
     * @summary Get currently active session public key
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetActiveSessionApi
     */
    getActiveSession(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetActiveSession200Response, any>>;
}
/**
 * GetAuthorizeSessionGroupHashApi - axios parameter creator
 * @export
 */
export declare const GetAuthorizeSessionGroupHashApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Group Hash of Authorizing Tx
     * @param {GetAuthorizeSessionGroupHashRequest} [getAuthorizeSessionGroupHashRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorizeSessionGroupHash: (getAuthorizeSessionGroupHashRequest?: GetAuthorizeSessionGroupHashRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GetAuthorizeSessionGroupHashApi - functional programming interface
 * @export
 */
export declare const GetAuthorizeSessionGroupHashApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Group Hash of Authorizing Tx
     * @param {GetAuthorizeSessionGroupHashRequest} [getAuthorizeSessionGroupHashRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorizeSessionGroupHash(getAuthorizeSessionGroupHashRequest?: GetAuthorizeSessionGroupHashRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuthorizeSessionGroupHash200Response>>;
};
/**
 * GetAuthorizeSessionGroupHashApi - factory interface
 * @export
 */
export declare const GetAuthorizeSessionGroupHashApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Group Hash of Authorizing Tx
     * @param {GetAuthorizeSessionGroupHashRequest} [getAuthorizeSessionGroupHashRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorizeSessionGroupHash(getAuthorizeSessionGroupHashRequest?: GetAuthorizeSessionGroupHashRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetAuthorizeSessionGroupHash200Response>;
};
/**
 * GetAuthorizeSessionGroupHashApi - object-oriented interface
 * @export
 * @class GetAuthorizeSessionGroupHashApi
 * @extends {BaseAPI}
 */
export declare class GetAuthorizeSessionGroupHashApi extends BaseAPI {
    /**
     *
     * @summary Get Group Hash of Authorizing Tx
     * @param {GetAuthorizeSessionGroupHashRequest} [getAuthorizeSessionGroupHashRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetAuthorizeSessionGroupHashApi
     */
    getAuthorizeSessionGroupHash(getAuthorizeSessionGroupHashRequest?: GetAuthorizeSessionGroupHashRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAuthorizeSessionGroupHash200Response, any>>;
}
/**
 * GetContractAccountApi - axios parameter creator
 * @export
 */
export declare const GetContractAccountApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Contract Account LSIG source code, along with parameters to reproduce in the client
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAccount: (getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GetContractAccountApi - functional programming interface
 * @export
 */
export declare const GetContractAccountApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Contract Account LSIG source code, along with parameters to reproduce in the client
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContractAccount200Response>>;
};
/**
 * GetContractAccountApi - factory interface
 * @export
 */
export declare const GetContractAccountApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Contract Account LSIG source code, along with parameters to reproduce in the client
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetContractAccount200Response>;
};
/**
 * GetContractAccountApi - object-oriented interface
 * @export
 * @class GetContractAccountApi
 * @extends {BaseAPI}
 */
export declare class GetContractAccountApi extends BaseAPI {
    /**
     *
     * @summary Get Contract Account LSIG source code, along with parameters to reproduce in the client
     * @param {GetContractAccountRequest} [getContractAccountRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetContractAccountApi
     */
    getContractAccount(getContractAccountRequest?: GetContractAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GetContractAccount200Response, any>>;
}
